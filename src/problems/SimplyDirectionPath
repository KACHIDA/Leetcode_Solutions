public class Solution {
    public String simplifyPath(String A) {
      
      Stack<String> stack = new Stack<String>();
 
 
    while(A.length()> 0 && A.charAt(A.length()-1) =='/'){
        A = A.substring(0, A.length()-1);
    }
 
    int start = 0;
    for(int i=1; i<A.length(); i++){
        if(A.charAt(i) == '/'){
            stack.push(A.substring(start, i));
            start = i;
        }else if(i==A.length()-1){
            stack.push(A.substring(start));
        }
    }
 
    LinkedList<String> result = new LinkedList<String>();
    int back = 0;
    while(!stack.isEmpty()){
        String top = stack.pop();
 
        if(top.equals("/.") || top.equals("/")){
            //nothing
        }else if(top.equals("/..")){
            back++;
        }else{
            if(back > 0){
                back--;
            }else{
                result.push(top);
            }
        }
    }
 
    //if empty, return "/"
    if(result.isEmpty()){
        return "/";
    }
 
    StringBuilder sb = new StringBuilder();
    while(!result.isEmpty()){
        String s = result.pop();
        sb.append(s);
    }
 
    return sb.toString();
        
    }
}
